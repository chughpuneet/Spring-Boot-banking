spring.application.name=accounts
spring.profiles.active=dev
spring.config.import=optional:configserver:http://localhost:8093/

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

server.port=8090

#Eureka client properties
#default is host name
eureka.instance.preferIpAddress = true
#self registry with eureka
eureka.client.registerWithEureka = true
#fetch registry, default is 30 secs interval
eureka.client.fetchRegistry = true
#eureka server url
eureka.client.serviceUrl.defaultZone = http://localhost:8094/eureka/

#info endpoint for actuator
info.app.name=Accounts Microservice
info.app.description=Bank Accounts Application
info.app.version=1.0.0

#actuator shutdown endpoint enabling, post method to shutdown a microservice
endpoints.shutdown.enabled=true
#expose the shutdown endpoint to outside worls
management.endpoint.shutdown.enabled=true
#expose all endpoints
management.endpoints.web.exposure.include=*
#enable the info endpoint for actuator
management.info.env.enabled=true

#Enable health indicator of circuit breaker for actuator
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true
#minimum number of calls to be monitored by circuit breaker, default is 50
resilience4j.circuitbreaker.instances.getCustomerAccountDetailsCircuitBreaker.minimumNumberOfCalls= 5
#percent of the monitoring calls (50) if fails  the circuit breaker will open the circuit
resilience4j.circuitbreaker.instances.getCustomerAccountDetailsCircuitBreaker.failureRateThreshold= 50
#Time duration in ms (30 sec here) the circuit breaker to wait in open state, default is 60 secs
resilience4j.circuitbreaker.instances.getCustomerAccountDetailsCircuitBreaker.waitDurationInOpenState= 30000
#number of calls to allow after waiting the circuit breaker will allow initially if these are successful the circuit
#breaker will close
resilience4j.circuitbreaker.instances.getCustomerAccountDetailsCircuitBreaker.permittedNumberOfCallsInHalfOpenState=2

#resilience4j.retry.configs.default.registerHealthIndicator= true
#retry max attempts
resilience4j.retry.instances.getCustomerAccountDetailsRetry.maxAttempts=3
#wait duration between retry
resilience4j.retry.instances.getCustomerAccountDetailsRetry.waitDuration=2000

#register rate limiter health indicator
resilience4j.ratelimiter.configs.default.registerHealthIndicator= true

#Time in ms the thread has to wait if rate limit is reached
resilience4j.ratelimiter.instances.getConfigRateLimiter.timeoutDuration=5000

#Time frequency in ms the rate limiter has to check/ refresh about number of threads that can be allowed
resilience4j.ratelimiter.instances.getConfigRateLimiter.limitRefreshPeriod=5000

#number of threads at a particular period is allowed
resilience4j.ratelimiter.instances.getConfigRateLimiter.limitForPeriod=1